extends layout

block content
  img(src=user.picture)
  h2 Welcome #{user.nickname}!
  br
  p#baseFolder #{baseFolder.name}
  each val in baseFolder.item_collection.entries
    if val.type === 'file' 
      a(href='./files/' + val.id) #{val.name}
      br
    else
      p= val.name
  p#accessToken #{user.boxAccessTokenObject.accessToken}
  h4 Upload File using CORS
    div.row
      div.col-md-4
        form(id="file-form" action="" method="POST")
            div.form-group
                input.form-control(id='file-select' name='files' type='file')
            div.form-group
                button.btn.btn-default(id='upload-button' type='submit') Upload
  a(href='/logout') Logout
  block append scripts
    script(src="https://cdn.auth0.com/js/lock-9.0.js")
    script.
        var form = document.getElementById('file-form');
        var fileSelect = document.getElementById('file-select');
        var uploadButton = document.getElementById('upload-button');

        form.onsubmit = function(event){
          event.preventDefault();
          uploadButton.innerHTML = 'Uploading...';

          // The Box Auth Header. Add your access token.
          var headers = { Authorization: 'Bearer #{user.boxAccessTokenObject.accessToken}'};
          var uploadUrl = 'https://upload.box.com/api/2.0/files/content';

          var files = fileSelect.files;
          var formData = new FormData();

          formData.append('files', files[0], files[0].name);

          // Add the destination folder for the upload to the form
          formData.append('parent_id', '0');

          $.ajax({
              url: uploadUrl,
              headers: headers,
              type: 'POST',
              // This prevents JQuery from trying to append the form as a querystring
              processData: false,
              contentType: false,
              data: formData
          }).complete(function ( data ) {
              uploadButton.innerHTML = 'Upload';
              // Log the JSON response to prove this worked
              console.log(data.responseText);
              location.reload(true);
          });
        }
    //- script(src="https://code.jquery.com/jquery-2.2.4.min.js")
    //- script(src="./javascripts/Box.Client.js")
    //- script.
    //-   var BoxApp = {
    //-     boxId: '#{user.app_metadata.boxId}',
    //-     auth0UserJwt: '#{user.id_token}',
    //-     boxAccessTokenObject: {'accessToken': '#{user.boxAccessTokenObject.accessToken}', 'expiresAt': '#{user.boxAccessTokenObject.expiresAt}'},
    //-     refreshCallbackUrl: '#{boxAccessTokenRefreshUrl}',
    //-     refreshBoxUserTokenCallback: function(err, success) {
    //-       console.log("REFRESHING ACCESS TOKEN WITH CALLBACK!!!!");
    //-       $.ajax({
    //-         method: 'POST',
    //-         url: BoxApp.refreshCallbackUrl,
    //-         headers: {
    //-           "Authorization": "Bearer #{user.id_token}"
    //-         },
    //-         data: {boxId: BoxApp.boxId}
    //-       })
    //-       .error(function(message) {
    //-         err(message);
    //-       })
    //-       .done(success);
    //-     },
    //-     setBoxId: function(callback) {
    //-       var me = this;
    //-       var lock = new Auth0Lock('#{env.AUTH0_CLIENT_ID}', '#{env.AUTH0_DOMAIN}');
    //-       lock.getProfile("#{user.id_token}", function (err, profile) {
    //-         if (err) {
    //-           return alert('There was an error getting the profile: ' + err.message);
    //-         }
    //-         me.boxId = profile.app_metadata.boxId;
    //-         callback();
    //-       });
    //-     }
    //-   };
    //- script.
    //-   BoxApp.boxAccessTokenObject.accessToken = 1234;
    //-   var boxClient = new Box.client(BoxApp.boxAccessTokenObject, BoxApp.refreshBoxUserTokenCallback);
    //-   console.log(boxClient);
    //-   boxClient.folders.get('0', null, function(err, body) {
    //-     if(err) {
    //-       console.log("Error detected");
    //-       console.log(err);
    //-     }
    //-     console.log(body);
    //-   });